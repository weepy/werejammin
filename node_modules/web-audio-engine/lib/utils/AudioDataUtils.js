"use strict";

var nmap = require("nmap");

/**
 * @param {*} data
 * @return {boolean}
 */
function isAudioData(data) {
  if (!data) {
    return false;
  }
  if (!Number.isFinite(data.sampleRate)) {
    return false;
  }
  if (!Array.isArray(data.channelData)) {
    return false;
  }
  if (!data.channelData.every(function (data) {
    return data instanceof Float32Array;
  })) {
    return false;
  }
  return true;
}

/**
 * @param {object} data
 * @return {AudioData}
 */
function toAudioData(data) {
  if (isAudioData(data)) {
    var numberOfChannels = data.channelData.length;
    var length = numberOfChannels ? data.channelData[0].length : 0;
    var sampleRate = data.sampleRate;
    var channelData = data.channelData;

    return { numberOfChannels: numberOfChannels, length: length, sampleRate: sampleRate, channelData: channelData };
  }
  if (isAudioBuffer(data)) {
    var _numberOfChannels = data.numberOfChannels;
    var _sampleRate = data.sampleRate;
    var _channelData = nmap(_numberOfChannels, function (_, ch) {
      return data.getChannelData(ch);
    });
    var _length = _numberOfChannels ? _channelData[0].length : 0;

    return { numberOfChannels: _numberOfChannels, length: _length, sampleRate: _sampleRate, channelData: _channelData };
  }
  return { numberOfChannels: 0, length: 0, sampleRate: 0, channelData: [] };
}

/**
 * @param {*} data
 * @return {boolean}
 */
function isAudioBuffer(data) {
  if (!data) {
    return false;
  }
  if (typeof data.numberOfChannels !== "number") {
    return false;
  }
  if (typeof data.sampleRate !== "number") {
    return false;
  }
  if (typeof data.getChannelData !== "function") {
    return false;
  }
  return true;
}

/**
 * @param {object} data
 * @param {class}  AudioBuffer
 * @return {AudioBuffer}
 */
function toAudioBuffer(data, AudioBuffer) {
  data = toAudioData(data);

  var audioBuffer = new AudioBuffer({
    numberOfChannels: data.numberOfChannels,
    length: data.length,
    sampleRate: data.sampleRate
  });
  var audioData = (audioBuffer._impl || audioBuffer).audioData;

  audioData.numberOfChannels = data.numberOfChannels;
  audioData.length = data.length;
  audioData.sampleRate = data.sampleRate;
  audioData.channelData = data.channelData;

  return audioBuffer;
}

module.exports = { isAudioData: isAudioData, toAudioData: toAudioData, isAudioBuffer: isAudioBuffer, toAudioBuffer: toAudioBuffer };