"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PCMArrayBufferWriter = function () {
  function PCMArrayBufferWriter(buffer) {
    _classCallCheck(this, PCMArrayBufferWriter);

    this._view = new DataView(buffer);
    this._pos = 0;
  }

  _createClass(PCMArrayBufferWriter, [{
    key: "pcm8",
    value: function pcm8(value) {
      value = Math.max(-1, Math.min(value, +1));
      value = (value * 0.5 + 0.5) * 128;
      this._view.setUint8(this._pos, value | 0);
      this._pos += 1;
    }
  }, {
    key: "pcm16",
    value: function pcm16(value) {
      value = Math.max(-1, Math.min(value, +1));
      value = value < 0 ? value * 32768 : value * 32767;
      this._view.setInt16(this._pos, value | 0, true);
      this._pos += 2;
    }
  }, {
    key: "pcm32",
    value: function pcm32(value) {
      value = Math.max(-1, Math.min(value, +1));
      value = value < 0 ? value * 2147483648 : value * 2147483647;
      this._view.setInt32(this._pos, value | 0, true);
      this._pos += 4;
    }
  }, {
    key: "pcm32f",
    value: function pcm32f(value) {
      this._view.setFloat32(this._pos, value, true);
      this._pos += 4;
    }
  }]);

  return PCMArrayBufferWriter;
}();

module.exports = PCMArrayBufferWriter;