"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nmap = require("nmap");
var config = require("../config");
var BaseAudioContext = require("../api/BaseAudioContext");
var PCMEncoder = require("../utils/PCMEncoder");
var setImmediate = require("../utils/setImmediate");

var _require = require("../utils"),
    defaults = _require.defaults,
    defineProp = _require.defineProp;

var _require2 = require("../utils"),
    toValidSampleRate = _require2.toValidSampleRate,
    toValidBlockSize = _require2.toValidBlockSize,
    toValidNumberOfChannels = _require2.toValidNumberOfChannels,
    toValidBitDepth = _require2.toValidBitDepth;

var _require3 = require("../constants/AudioContextState"),
    RUNNING = _require3.RUNNING,
    SUSPENDED = _require3.SUSPENDED,
    CLOSED = _require3.CLOSED;

var noopWriter = { write: function write() {
    return true;
  } };

var StreamAudioContext = function (_BaseAudioContext) {
  _inherits(StreamAudioContext, _BaseAudioContext);

  /**
   * @param {object}  opts
   * @param {number}  opts.sampleRate
   * @param {number}  opts.blockSize
   * @param {number}  opts.numberOfChannels
   * @param {number}  opts.bitDepth
   * @param {boolean} opts.floatingPoint
   */
  function StreamAudioContext() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, StreamAudioContext);

    var sampleRate = defaults(opts.sampleRate, config.sampleRate);
    var blockSize = defaults(opts.blockSize, config.blockSize);
    var numberOfChannels = defaults(opts.channels || opts.numberOfChannels, config.numberOfChannels);
    var bitDepth = defaults(opts.bitDepth, config.bitDepth);
    var floatingPoint = opts.float || opts.floatingPoint;

    sampleRate = toValidSampleRate(sampleRate);
    blockSize = toValidBlockSize(blockSize);
    numberOfChannels = toValidNumberOfChannels(numberOfChannels);
    bitDepth = toValidBitDepth(bitDepth);
    floatingPoint = !!floatingPoint;

    var _this = _possibleConstructorReturn(this, (StreamAudioContext.__proto__ || Object.getPrototypeOf(StreamAudioContext)).call(this, { sampleRate: sampleRate, blockSize: blockSize, numberOfChannels: numberOfChannels }));

    var format = { sampleRate: sampleRate, channels: numberOfChannels, bitDepth: bitDepth, float: floatingPoint };
    var encoder = PCMEncoder.create(blockSize, format);

    defineProp(_this, "_numberOfChannels", numberOfChannels);
    defineProp(_this, "_encoder", encoder);
    defineProp(_this, "_blockSize", blockSize);
    defineProp(_this, "_stream", noopWriter);
    defineProp(_this, "_isPlaying", false);
    defineProp(_this, "_format", format);
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(StreamAudioContext, [{
    key: "pipe",


    /**
     * @param {Writable}
     * @return {Writable}
     */
    value: function pipe(stream) {
      this._stream = stream;
      return stream;
    }

    /**
     * @return {Promise<void>}
     */

  }, {
    key: "resume",
    value: function resume() {
      /* istanbul ignore else */
      if (this.state === SUSPENDED) {
        this._resume();
      }
      return _get(StreamAudioContext.prototype.__proto__ || Object.getPrototypeOf(StreamAudioContext.prototype), "resume", this).call(this);
    }

    /**
     * @return {Promise<void>}
     */

  }, {
    key: "suspend",
    value: function suspend() {
      /* istanbul ignore else */
      if (this.state === RUNNING) {
        this._suspend();
      }
      return _get(StreamAudioContext.prototype.__proto__ || Object.getPrototypeOf(StreamAudioContext.prototype), "suspend", this).call(this);
    }

    /**
     * @return {Promise<void>}
     */

  }, {
    key: "close",
    value: function close() {
      /* istanbul ignore else */
      if (this.state !== CLOSED) {
        this._close();
      }
      return _get(StreamAudioContext.prototype.__proto__ || Object.getPrototypeOf(StreamAudioContext.prototype), "close", this).call(this);
    }
  }, {
    key: "_resume",
    value: function _resume() {
      var _this2 = this;

      var contextStartTime = this.currentTime;
      var timerStartTime = Date.now();
      var encoder = this._encoder;
      var impl = this._impl;
      var aheadTime = 0.1;
      var channelData = nmap(this._numberOfChannels, function () {
        return new Float32Array(_this2._blockSize);
      });

      var renderingProcess = function renderingProcess() {
        if (_this2._isPlaying) {
          var contextElapsed = impl.currentTime - contextStartTime;
          var timerElapsed = (Date.now() - timerStartTime) / 1000;

          if (contextElapsed < timerElapsed + aheadTime) {
            impl.process(channelData, 0);

            var buffer = encoder.encode(channelData);

            if (!_this2._stream.write(buffer)) {
              _this2._stream.once("drain", renderingProcess);
              return;
            }
          }

          setTimeout(renderingProcess, 0);
        }
      };
      this._isPlaying = true;
      setImmediate(renderingProcess);
    }
  }, {
    key: "_suspend",
    value: function _suspend() {
      this._isPlaying = false;
    }
  }, {
    key: "_close",
    value: function _close() {
      this._suspend();
      /* istanbul ignore else */
      if (this._stream !== null) {
        this._stream = null;
      }
    }
  }, {
    key: "numberOfChannels",
    get: function get() {
      return this._impl.numberOfChannels;
    }

    /**
     * @return {number}
     */

  }, {
    key: "blockSize",
    get: function get() {
      return this._impl.blockSize;
    }

    /**
     * @return {object}
     */

  }, {
    key: "format",
    get: function get() {
      return this._format;
    }
  }]);

  return StreamAudioContext;
}(BaseAudioContext);

module.exports = StreamAudioContext;