"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var config = require("../config");
var BaseAudioContext = require("../api/BaseAudioContext");

var _require = require("../utils"),
    defaults = _require.defaults,
    defineProp = _require.defineProp;

var _require2 = require("../utils"),
    toValidBlockSize = _require2.toValidBlockSize,
    toValidNumberOfChannels = _require2.toValidNumberOfChannels,
    toPowerOfTwo = _require2.toPowerOfTwo;

var DSPAlgorithm = [];

var WebAudioContext = function (_BaseAudioContext) {
  _inherits(WebAudioContext, _BaseAudioContext);

  /**
   * @param {object}  opts
   * @param {AudioContext} opts.context
   * @param {AudioNode}    opts.destination
   * @param {number}       opts.blockSize
   * @param {number}       opts.numberOfChannels
   * @param {number}       opts.bufferSize
   */
  function WebAudioContext() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WebAudioContext);

    var destination = opts.destination || opts.context.destination;
    var context = destination.context;
    var sampleRate = context.sampleRate;
    var blockSize = defaults(opts.blockSize, config.blockSize);
    var numberOfChannels = defaults(opts.numberOfChannels, config.numberOfChannels);
    var bufferSize = defaults(opts.bufferSize, 1024);

    blockSize = toValidBlockSize(blockSize);
    numberOfChannels = toValidNumberOfChannels(numberOfChannels);
    bufferSize = toPowerOfTwo(bufferSize);
    bufferSize = Math.max(256, Math.min(bufferSize, 16384));

    var _this = _possibleConstructorReturn(this, (WebAudioContext.__proto__ || Object.getPrototypeOf(WebAudioContext)).call(this, { sampleRate: sampleRate, blockSize: blockSize, numberOfChannels: numberOfChannels }));

    var processor = context.createScriptProcessor(bufferSize, 0, numberOfChannels);
    var dspProcess = DSPAlgorithm[numberOfChannels] || DSPAlgorithm[0];

    processor.onaudioprocess = dspProcess(_this._impl, numberOfChannels, bufferSize);

    defineProp(_this, "_originalContext", context);
    defineProp(_this, "_destination", destination);
    defineProp(_this, "_processor", processor);
    return _this;
  }

  _createClass(WebAudioContext, [{
    key: "resume",


    /**
     * @return {Promise<void>}
     */
    value: function resume() {
      if (this._processor) {
        this._processor.connect(this._destination);
      }
      return _get(WebAudioContext.prototype.__proto__ || Object.getPrototypeOf(WebAudioContext.prototype), "resume", this).call(this);
    }

    /**
     * @return {Promise<void>}
     */

  }, {
    key: "suspend",
    value: function suspend() {
      if (this._processor) {
        this._processor.disconnect();
      }
      return _get(WebAudioContext.prototype.__proto__ || Object.getPrototypeOf(WebAudioContext.prototype), "suspend", this).call(this);
    }

    /**
     * @return {Promise<void>}
     */

  }, {
    key: "close",
    value: function close() {
      if (this._processor) {
        this._processor.disconnect();
        this._processor = null;
      }
      return _get(WebAudioContext.prototype.__proto__ || Object.getPrototypeOf(WebAudioContext.prototype), "close", this).call(this);
    }
  }, {
    key: "originalContext",
    get: function get() {
      return this._originalContext;
    }
  }]);

  return WebAudioContext;
}(BaseAudioContext);

DSPAlgorithm[0] = function (impl, numberOfChannels, bufferSize) {
  var blockSize = impl.blockSize;
  var iterations = bufferSize / blockSize;
  var channelData = new Array(numberOfChannels);

  return function (e) {
    var outputBuffer = e.outputBuffer;

    for (var ch = 0; ch < numberOfChannels; ch++) {
      channelData[ch] = outputBuffer.getChannelData(ch);
    }

    for (var i = 0; i < iterations; i++) {
      impl.process(channelData, i * blockSize);
    }
  };
};

DSPAlgorithm[1] = function (impl, numberOfChannels, bufferSize) {
  var blockSize = impl.blockSize;
  var iterations = bufferSize / blockSize;

  return function (e) {
    var channelData = [e.outputBuffer.getChannelData(0)];

    for (var i = 0; i < iterations; i++) {
      impl.process(channelData, i * blockSize);
    }
  };
};

DSPAlgorithm[2] = function (impl, numberOfChannels, bufferSize) {
  var blockSize = impl.blockSize;
  var iterations = bufferSize / blockSize;

  return function (e) {
    var outputBuffer = e.outputBuffer;
    var channelData = [outputBuffer.getChannelData(0), outputBuffer.getChannelData(1)];

    for (var i = 0; i < iterations; i++) {
      impl.process(channelData, i * blockSize);
    }
  };
};

module.exports = WebAudioContext;