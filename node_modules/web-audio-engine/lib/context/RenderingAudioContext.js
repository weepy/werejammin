"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nmap = require("nmap");
var config = require("../config");
var BaseAudioContext = require("../api/BaseAudioContext");
var encoder = require("../encoder");

var _require = require("../utils"),
    defaults = _require.defaults,
    defineProp = _require.defineProp;

var _require2 = require("../utils"),
    toValidSampleRate = _require2.toValidSampleRate,
    toValidBlockSize = _require2.toValidBlockSize,
    toValidNumberOfChannels = _require2.toValidNumberOfChannels,
    toValidBitDepth = _require2.toValidBitDepth,
    toAudioTime = _require2.toAudioTime;

var _require3 = require("../constants/AudioContextState"),
    RUNNING = _require3.RUNNING,
    SUSPENDED = _require3.SUSPENDED;

var RenderingAudioContext = function (_BaseAudioContext) {
  _inherits(RenderingAudioContext, _BaseAudioContext);

  /**
   * @param {object}  opts
   * @param {number}  opts.sampleRate
   * @param {number}  opts.blockSize
   * @param {number}  opts.numberOfChannels
   * @param {number}  opts.bitDepth
   * @param {boolean} opts.floatingPoint
   */
  function RenderingAudioContext() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RenderingAudioContext);

    var sampleRate = defaults(opts.sampleRate, config.sampleRate);
    var blockSize = defaults(opts.blockSize, config.blockSize);
    var numberOfChannels = defaults(opts.channels || opts.numberOfChannels, config.numberOfChannels);
    var bitDepth = defaults(opts.bitDepth, config.bitDepth);
    var floatingPoint = opts.float || opts.floatingPoint;

    sampleRate = toValidSampleRate(sampleRate);
    blockSize = toValidBlockSize(blockSize);
    numberOfChannels = toValidNumberOfChannels(numberOfChannels);
    bitDepth = toValidBitDepth(bitDepth);
    floatingPoint = !!floatingPoint;

    var _this = _possibleConstructorReturn(this, (RenderingAudioContext.__proto__ || Object.getPrototypeOf(RenderingAudioContext)).call(this, { sampleRate: sampleRate, blockSize: blockSize, numberOfChannels: numberOfChannels }));

    defineProp(_this, "_format", { sampleRate: sampleRate, channels: numberOfChannels, bitDepth: bitDepth, float: floatingPoint });
    defineProp(_this, "_rendered", []);
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(RenderingAudioContext, [{
    key: "processTo",


    /**
     * @param {number|string} time
     */
    value: function processTo(time) {
      time = toAudioTime(time);

      var duration = time - this.currentTime;

      /* istanbul ignore next */
      if (duration <= 0) {
        return;
      }

      var impl = this._impl;
      var blockSize = impl.blockSize;
      var iterations = Math.ceil(duration * this.sampleRate / blockSize);
      var bufferLength = blockSize * iterations;
      var numberOfChannels = this._format.channels;
      var buffers = nmap(numberOfChannels, function () {
        return new Float32Array(bufferLength);
      });

      impl.changeState(RUNNING);

      for (var i = 0; i < iterations; i++) {
        impl.process(buffers, i * blockSize);
      }

      this._rendered.push(buffers);

      impl.changeState(SUSPENDED);
    }

    /**
     * @return {AudioData}
     */

  }, {
    key: "exportAsAudioData",
    value: function exportAsAudioData() {
      var numberOfChannels = this._format.channels;
      var length = this._rendered.reduce(function (length, buffers) {
        return length + buffers[0].length;
      }, 0);
      var sampleRate = this._format.sampleRate;
      var channelData = nmap(numberOfChannels, function () {
        return new Float32Array(length);
      });
      var audioData = { numberOfChannels: numberOfChannels, length: length, sampleRate: sampleRate, channelData: channelData };

      var offset = 0;

      this._rendered.forEach(function (buffers) {
        for (var ch = 0; ch < numberOfChannels; ch++) {
          channelData[ch].set(buffers[ch], offset);
        }
        offset += buffers[0].length;
      });

      return audioData;
    }

    /**
     * @param {AudioData} audioData
     * @param {object}    opts
     */

  }, {
    key: "encodeAudioData",
    value: function encodeAudioData(audioData, opts) {
      opts = Object.assign({}, this._format, opts);
      return encoder.encode(audioData, opts);
    }
  }, {
    key: "numberOfChannels",
    get: function get() {
      return this._impl.numberOfChannels;
    }

    /**
     * @return {number}
     */

  }, {
    key: "blockSize",
    get: function get() {
      return this._impl.blockSize;
    }

    /**
     * @return {object}
     */

  }, {
    key: "format",
    get: function get() {
      return this._format;
    }
  }]);

  return RenderingAudioContext;
}(BaseAudioContext);

module.exports = RenderingAudioContext;