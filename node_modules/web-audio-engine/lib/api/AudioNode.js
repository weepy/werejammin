"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventTarget = require("./EventTarget");

var _require = require("../utils"),
    defineProp = _require.defineProp;

var AudioNode = function (_EventTarget) {
  _inherits(AudioNode, _EventTarget);

  function AudioNode(context) {
    _classCallCheck(this, AudioNode);

    var _this = _possibleConstructorReturn(this, (AudioNode.__proto__ || Object.getPrototypeOf(AudioNode)).call(this));

    defineProp(_this, "_context", context);
    defineProp(_this, "_impl", null);
    return _this;
  }

  _createClass(AudioNode, [{
    key: "connect",
    value: function connect(destination, input, output) {
      this._impl.connect(destination._impl, input, output);

      /* istanbul ignore else */
      if (destination instanceof AudioNode) {
        return destination;
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this._impl.disconnect.apply(this._impl, arguments);
    }
  }, {
    key: "context",
    get: function get() {
      return this._context;
    }
  }, {
    key: "numberOfInputs",
    get: function get() {
      return this._impl.getNumberOfInputs();
    }
  }, {
    key: "numberOfOutputs",
    get: function get() {
      return this._impl.getNumberOfOutputs();
    }
  }, {
    key: "channelCount",
    get: function get() {
      return this._impl.getChannelCount();
    },
    set: function set(value) {
      this._impl.setChannelCount(value);
    }
  }, {
    key: "channelCountMode",
    get: function get() {
      return this._impl.getChannelCountMode();
    },
    set: function set(value) {
      this._impl.setChannelCountMode(value);
    }
  }, {
    key: "channelInterpretation",
    get: function get() {
      return this._impl.getChannelInterpretation();
    },
    set: function set(value) {
      return this._impl.setChannelInterpretation(value);
    }
  }]);

  return AudioNode;
}(EventTarget);

module.exports = AudioNode;