"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var impl = require("../impl");
var AudioNode = require("./AudioNode");
var AudioParam = require("./AudioParam");

var SpatialPannerNode = function (_AudioNode) {
  _inherits(SpatialPannerNode, _AudioNode);

  function SpatialPannerNode(context, opts) {
    _classCallCheck(this, SpatialPannerNode);

    var _this = _possibleConstructorReturn(this, (SpatialPannerNode.__proto__ || Object.getPrototypeOf(SpatialPannerNode)).call(this, context));

    _this._impl = new impl.SpatialPannerNode(context._impl, opts);
    _this._impl.$positionX = new AudioParam(context, _this._impl.getPositionX());
    _this._impl.$positionY = new AudioParam(context, _this._impl.getPositionY());
    _this._impl.$positionZ = new AudioParam(context, _this._impl.getPositionZ());
    _this._impl.$orientationX = new AudioParam(context, _this._impl.getOrientationX());
    _this._impl.$orientationY = new AudioParam(context, _this._impl.getOrientationY());
    _this._impl.$orientationZ = new AudioParam(context, _this._impl.getOrientationZ());
    return _this;
  }

  _createClass(SpatialPannerNode, [{
    key: "panningModel",
    get: function get() {
      return this._impl.getPanningModel();
    },
    set: function set(value) {
      this._impl.setPanningModel(value);
    }
  }, {
    key: "positionX",
    get: function get() {
      return this._impl.$positionX;
    }
  }, {
    key: "positionY",
    get: function get() {
      return this._impl.$positionY;
    }
  }, {
    key: "positionZ",
    get: function get() {
      return this._impl.$positionZ;
    }
  }, {
    key: "orientationX",
    get: function get() {
      return this._impl.$orientationX;
    }
  }, {
    key: "orientationY",
    get: function get() {
      return this._impl.$orientationY;
    }
  }, {
    key: "orientationZ",
    get: function get() {
      return this._impl.$orientationZ;
    }
  }, {
    key: "distanceModel",
    get: function get() {
      return this._impl.getDistanceModel();
    },
    set: function set(value) {
      this._impl.setDistanceModel(value);
    }
  }, {
    key: "refDistance",
    get: function get() {
      return this._impl.getRefDistance();
    },
    set: function set(value) {
      this._impl.setRefDistance(value);
    }
  }, {
    key: "maxDistance",
    get: function get() {
      return this._impl.getMaxDistance();
    },
    set: function set(value) {
      this._impl.setMaxDistance(value);
    }
  }, {
    key: "rolloffFactor",
    get: function get() {
      return this._impl.getRolloffFactor();
    },
    set: function set(value) {
      this._impl.setRolloffFactor(value);
    }
  }, {
    key: "coneInnerAngle",
    get: function get() {
      return this._impl.getConeInnerAngle();
    },
    set: function set(value) {
      this._impl.setConeInnerAngle(value);
    }
  }, {
    key: "coneOuterAngle",
    get: function get() {
      return this._impl.getConeOuterAngle();
    },
    set: function set(value) {
      this._impl.setConeOuterAngle(value);
    }
  }, {
    key: "coneOuterGain",
    get: function get() {
      return this._impl.getConeOuterGain();
    },
    set: function set(value) {
      this._impl.setConeOuterGain(value);
    }
  }]);

  return SpatialPannerNode;
}(AudioNode);

module.exports = SpatialPannerNode;