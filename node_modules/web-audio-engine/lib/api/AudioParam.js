"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("../utils"),
    defineProp = _require.defineProp;

var AudioParam = function () {
  function AudioParam(context, impl) {
    _classCallCheck(this, AudioParam);

    defineProp(this, "_context", context);
    defineProp(this, "_impl", impl);
  }

  _createClass(AudioParam, [{
    key: "setValueAtTime",
    value: function setValueAtTime(value, startTime) {
      this._impl.setValueAtTime(value, startTime);
      return this;
    }
  }, {
    key: "linearRampToValueAtTime",
    value: function linearRampToValueAtTime(value, endTime) {
      this._impl.linearRampToValueAtTime(value, endTime);
      return this;
    }
  }, {
    key: "exponentialRampToValueAtTime",
    value: function exponentialRampToValueAtTime(value, endTime) {
      this._impl.exponentialRampToValueAtTime(value, endTime);
      return this;
    }
  }, {
    key: "setTargetAtTime",
    value: function setTargetAtTime(target, startTime, timeConstant) {
      this._impl.setTargetAtTime(target, startTime, timeConstant);
      return this;
    }
  }, {
    key: "setValueCurveAtTime",
    value: function setValueCurveAtTime(values, startTime, duration) {
      this._impl.setValueCurveAtTime(values, startTime, duration);
      return this;
    }
  }, {
    key: "cancelScheduledValues",
    value: function cancelScheduledValues(startTime) {
      this._impl.cancelScheduledValues(startTime);
      return this;
    }
  }, {
    key: "value",
    get: function get() {
      return this._impl.getValue();
    },
    set: function set(value) {
      this._impl.setValue(value);
    }
  }, {
    key: "defaultValue",
    get: function get() {
      return this._impl.getDefaultValue();
    }
  }]);

  return AudioParam;
}();

module.exports = AudioParam;