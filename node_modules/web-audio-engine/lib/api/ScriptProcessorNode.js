"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var impl = require("../impl");
var AudioNode = require("./AudioNode");
var AudioBuffer = require("./AudioBuffer");

var ScriptProcessorNode = function (_AudioNode) {
  _inherits(ScriptProcessorNode, _AudioNode);

  function ScriptProcessorNode(context, opts) {
    _classCallCheck(this, ScriptProcessorNode);

    var _this = _possibleConstructorReturn(this, (ScriptProcessorNode.__proto__ || Object.getPrototypeOf(ScriptProcessorNode)).call(this, context));

    _this._impl = new impl.ScriptProcessorNode(context._impl, opts);
    _this._impl.$onaudioprocess = null;
    _this._impl.setEventItem({
      type: "audioprocess",
      playbackTime: 0,
      inputBuffer: new AudioBuffer(),
      outputBuffer: new AudioBuffer()
    });
    return _this;
  }

  _createClass(ScriptProcessorNode, [{
    key: "bufferSize",
    get: function get() {
      return this._impl.getBufferSize();
    }
  }, {
    key: "onaudioprocess",
    get: function get() {
      return this._impl.$onaudioprocess;
    },
    set: function set(callback) {
      this._impl.replaceEventListener("audioprocess", this._impl.$onaudioprocess, callback);
      this._impl.$onaudioprocess = callback;
    }
  }]);

  return ScriptProcessorNode;
}(AudioNode);

module.exports = ScriptProcessorNode;