"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");
var ChannelSplitterNodeDSP = require("./dsp/ChannelSplitterNode");

var _require = require("../utils"),
    defaults = _require.defaults,
    fill = _require.fill;

var _require2 = require("../utils"),
    toValidNumberOfChannels = _require2.toValidNumberOfChannels;

var _require3 = require("../constants/ChannelCountMode"),
    MAX = _require3.MAX;

var DEFAULT_NUMBER_OF_OUTPUTS = 6;

var ChannelSplitterNode = function (_AudioNode) {
  _inherits(ChannelSplitterNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.numberOfOutputs
   */
  function ChannelSplitterNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ChannelSplitterNode);

    var numberOfOutputs = defaults(opts.numberOfOutputs, DEFAULT_NUMBER_OF_OUTPUTS);

    numberOfOutputs = toValidNumberOfChannels(numberOfOutputs);

    return _possibleConstructorReturn(this, (ChannelSplitterNode.__proto__ || Object.getPrototypeOf(ChannelSplitterNode)).call(this, context, opts, {
      inputs: [1],
      outputs: fill(new Array(numberOfOutputs), 1),
      channelCount: 2,
      channelCountMode: MAX
    }));
  }

  return ChannelSplitterNode;
}(AudioNode);

Object.assign(ChannelSplitterNode.prototype, ChannelSplitterNodeDSP);

module.exports = ChannelSplitterNode;