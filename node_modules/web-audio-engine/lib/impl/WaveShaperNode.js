"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");
var WaveShaperNodeDSP = require("./dsp/WaveShaperNode");

var _require = require("../utils"),
    defaults = _require.defaults;

var _require2 = require("../constants/ChannelCountMode"),
    MAX = _require2.MAX;

var OverSampleTypes = ["none", "2x", "4x"];

var DEFAULT_CURVE = null;
var DEFAULT_OVERSAMPLE = "none";

var WaveShaperNode = function (_AudioNode) {
  _inherits(WaveShaperNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {Float32Arrat} opts.curve
   * @param {string}       opts.overSample
   */
  function WaveShaperNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, WaveShaperNode);

    var curve = defaults(opts.curve, DEFAULT_CURVE);
    var overSample = defaults(opts.overSample, DEFAULT_OVERSAMPLE);

    var _this = _possibleConstructorReturn(this, (WaveShaperNode.__proto__ || Object.getPrototypeOf(WaveShaperNode)).call(this, context, opts, {
      inputs: [1],
      outputs: [1],
      channelCount: 2,
      channelCountMode: MAX
    }));

    _this._curve = curve;
    _this._overSample = overSample;

    _this.dspInit();
    _this.dspUpdateKernel(null, 1);
    return _this;
  }

  /**
   * @return {Float32Array}
   */


  _createClass(WaveShaperNode, [{
    key: "getCurve",
    value: function getCurve() {
      return this._curve;
    }

    /**
     * @param {Float32Array} value
     */

  }, {
    key: "setCurve",
    value: function setCurve(value) {
      /* istanbul ignore else */
      if (value === null || value instanceof Float32Array) {
        this._curve = value;
        this.dspUpdateKernel(this._curve, this.outputs[0].getNumberOfChannels());
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "getOversample",
    value: function getOversample() {
      return this._overSample;
    }

    /**
     * @param {boolean} value
     */

  }, {
    key: "setOversample",
    value: function setOversample(value) {
      /* istanbul ignore else */
      if (OverSampleTypes.indexOf(value) !== -1) {
        this._overSample = value;
      }
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "channelDidUpdate",
    value: function channelDidUpdate(numberOfChannels) {
      this.dspUpdateKernel(this._curve, numberOfChannels);
      this.outputs[0].setNumberOfChannels(numberOfChannels);
    }
  }]);

  return WaveShaperNode;
}(AudioNode);

Object.assign(WaveShaperNode.prototype, WaveShaperNodeDSP);

module.exports = WaveShaperNode;