"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioScheduledSourceNode = require("./AudioScheduledSourceNode");
var PeriodicWave = require("./PeriodicWave");
var OscillatorNodeDSP = require("./dsp/OscillatorNode");

var _require = require("../utils"),
    defaults = _require.defaults;

var _require2 = require("../utils"),
    toImpl = _require2.toImpl;

var _require3 = require("../constants/AudioParamRate"),
    AUDIO_RATE = _require3.AUDIO_RATE;

var _require4 = require("../constants/OscillatorType"),
    SINE = _require4.SINE,
    SAWTOOTH = _require4.SAWTOOTH,
    TRIANGLE = _require4.TRIANGLE,
    SQUARE = _require4.SQUARE,
    CUSTOM = _require4.CUSTOM;

var DefaultPeriodicWaves = {};
var allowedOscillatorTypes = [SINE, SAWTOOTH, TRIANGLE, SQUARE];

var DEFAULT_TYPE = SINE;
var DEFAULT_FREQUENCY = 440;
var DEFAULT_DETUNE = 0;

var OscillatorNode = function (_AudioScheduledSource) {
  _inherits(OscillatorNode, _AudioScheduledSource);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {string}       opts.type
   * @param {number}       opts.frequency
   * @param {number}       opts.detune
   */
  function OscillatorNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, OscillatorNode);

    var type = defaults(opts.type, DEFAULT_TYPE);
    var frequency = defaults(opts.frequency, DEFAULT_FREQUENCY);
    var detune = defaults(opts.detune, DEFAULT_DETUNE);

    var _this = _possibleConstructorReturn(this, (OscillatorNode.__proto__ || Object.getPrototypeOf(OscillatorNode)).call(this, context, opts));

    _this._frequency = _this.addParam(AUDIO_RATE, frequency);
    _this._detune = _this.addParam(AUDIO_RATE, detune);
    _this._type = type;
    _this._periodicWave = _this.buildPeriodicWave(_this._type);
    _this._waveTable = null;

    _this.dspInit();
    return _this;
  }

  /**
   * @return {string}
   */


  _createClass(OscillatorNode, [{
    key: "getType",
    value: function getType() {
      return this._type;
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setType",
    value: function setType(value) {
      /* istanbul ignore else */
      if (allowedOscillatorTypes.indexOf(value) !== -1) {
        this._type = value;
        this._periodicWave = this.buildPeriodicWave(value);
        this._waveTable = this._periodicWave.getWaveTable();
      }
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getFrequency",
    value: function getFrequency() {
      return this._frequency;
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getDetune",
    value: function getDetune() {
      return this._detune;
    }

    /**
     * @param {PeriodicWave} periodicWave
     */

  }, {
    key: "setPeriodicWave",
    value: function setPeriodicWave(periodicWave) {
      periodicWave = toImpl(periodicWave);

      /* istanbul ignore else */
      if (periodicWave instanceof PeriodicWave) {
        this._type = CUSTOM;
        this._periodicWave = periodicWave;
        this._waveTable = this._periodicWave.getWaveTable();
      }
    }

    /**
     * @return {PeriodicWave}
     */

  }, {
    key: "getPeriodicWave",
    value: function getPeriodicWave() {
      return this._periodicWave;
    }

    /**
     * @param {string} type
     * @return {PeriodicWave}
     */

  }, {
    key: "buildPeriodicWave",
    value: function buildPeriodicWave(type) {
      var sampleRate = this.context.sampleRate;
      var key = type + ":" + sampleRate;

      /* istanbul ignore else */
      if (!DefaultPeriodicWaves[key]) {
        var periodicWave = new PeriodicWave({ sampleRate: sampleRate }, { constraints: false });

        periodicWave.generateBasicWaveform(type);

        DefaultPeriodicWaves[key] = periodicWave;
      }

      return DefaultPeriodicWaves[key];
    }
  }]);

  return OscillatorNode;
}(AudioScheduledSourceNode);

Object.assign(OscillatorNode.prototype, OscillatorNodeDSP);

module.exports = OscillatorNode;