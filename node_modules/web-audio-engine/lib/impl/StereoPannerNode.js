"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BasePannerNode = require("./BasePannerNode");
var StereoPannerNodeDSP = require("./dsp/StereoPannerNode");

var _require = require("../utils"),
    defaults = _require.defaults;

var _require2 = require("../constants/AudioParamRate"),
    AUDIO_RATE = _require2.AUDIO_RATE;

var DEFAULT_PAN = 0;

var StereoPannerNode = function (_BasePannerNode) {
  _inherits(StereoPannerNode, _BasePannerNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.pan
   */
  function StereoPannerNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, StereoPannerNode);

    var pan = defaults(opts.pan, DEFAULT_PAN);

    var _this = _possibleConstructorReturn(this, (StereoPannerNode.__proto__ || Object.getPrototypeOf(StereoPannerNode)).call(this, context, opts));

    _this._pan = _this.addParam(AUDIO_RATE, pan);
    return _this;
  }

  /**
   * @param {AudioParam}
   */


  _createClass(StereoPannerNode, [{
    key: "getPan",
    value: function getPan() {
      return this._pan;
    }
  }]);

  return StereoPannerNode;
}(BasePannerNode);

Object.assign(StereoPannerNode.prototype, StereoPannerNodeDSP);

module.exports = StereoPannerNode;