"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");

var _require = require("../utils"),
    toValidNumberOfChannels = _require.toValidNumberOfChannels;

var _require2 = require("../constants/ChannelCountMode"),
    EXPLICIT = _require2.EXPLICIT;

/**
 * @prop {AudioNodeOutput} output
 * @prop {AudioBus}        outputBus
 */


var AudioDestinationNode = function (_AudioNode) {
  _inherits(AudioDestinationNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.numberOfChannels
   */
  function AudioDestinationNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AudioDestinationNode);

    var numberOfChannels = opts.numberOfChannels;

    numberOfChannels = toValidNumberOfChannels(numberOfChannels);

    var _this = _possibleConstructorReturn(this, (AudioDestinationNode.__proto__ || Object.getPrototypeOf(AudioDestinationNode)).call(this, context, opts, {
      inputs: [numberOfChannels],
      outputs: [],
      channelCount: numberOfChannels,
      channelCountMode: EXPLICIT,
      allowedMaxChannelCount: numberOfChannels
    }));

    _this._numberOfChannels = numberOfChannels | 0;
    _this._destinationChannelData = _this.inputs[0].bus.getChannelData();
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(AudioDestinationNode, [{
    key: "getMaxChannelCount",
    value: function getMaxChannelCount() {
      return this._numberOfChannels;
    }

    /**
     * @param {Float32Array[]} channelData
     * @param {number}         offset
     */

  }, {
    key: "process",
    value: function process(channelData, offset) {
      var inputs = this.inputs;
      var destinationChannelData = this._destinationChannelData;
      var numberOfChannels = channelData.length;

      for (var i = 0, imax = inputs.length; i < imax; i++) {
        inputs[i].pull();
      }

      for (var ch = 0; ch < numberOfChannels; ch++) {
        channelData[ch].set(destinationChannelData[ch], offset);
      }
    }
  }]);

  return AudioDestinationNode;
}(AudioNode);

module.exports = AudioDestinationNode;