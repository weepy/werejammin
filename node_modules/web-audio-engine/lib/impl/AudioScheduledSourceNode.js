"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioSourceNode = require("./AudioSourceNode");

var _require = require("../utils"),
    toNumber = _require.toNumber;

var _require2 = require("../constants/PlaybackState"),
    UNSCHEDULED = _require2.UNSCHEDULED,
    SCHEDULED = _require2.SCHEDULED,
    PLAYING = _require2.PLAYING,
    FINISHED = _require2.FINISHED;

var AudioScheduledSourceNode = function (_AudioSourceNode) {
  _inherits(AudioScheduledSourceNode, _AudioSourceNode);

  /**
   * @param {AudioContext} context
   */
  function AudioScheduledSourceNode(context, opts) {
    _classCallCheck(this, AudioScheduledSourceNode);

    var _this = _possibleConstructorReturn(this, (AudioScheduledSourceNode.__proto__ || Object.getPrototypeOf(AudioScheduledSourceNode)).call(this, context, opts));

    _this._startTime = Infinity;
    _this._stopTime = Infinity;
    _this._startFrame = Infinity;
    _this._stopFrame = Infinity;
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(AudioScheduledSourceNode, [{
    key: "getStartTime",
    value: function getStartTime() {
      if (this._startTime !== Infinity) {
        return this._startTime;
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getStopTime",
    value: function getStopTime() {
      if (this._stopTime !== Infinity) {
        return this._stopTime;
      }
    }

    /**
     * @return {string}
     */

  }, {
    key: "getPlaybackState",
    value: function getPlaybackState() {
      if (this._startTime === Infinity) {
        return UNSCHEDULED;
      }
      if (this.context.currentTime < this._startTime) {
        return SCHEDULED;
      }
      if (this._stopTime <= this.context.currentTime) {
        return FINISHED;
      }
      return PLAYING;
    }

    /**
     * @param {number} when
     */

  }, {
    key: "start",
    value: function start(when) {
      var _this2 = this;

      /* istanbul ignore next */
      if (this._startTime !== Infinity) {
        return;
      }

      when = Math.max(this.context.currentTime, toNumber(when));

      this._startTime = when;
      this._startFrame = Math.round(when * this.sampleRate);

      this.context.sched(when, function () {
        _this2.outputs[0].enable();
      });
    }

    /**
     * @param {number} when
     */

  }, {
    key: "stop",
    value: function stop(when) {
      /* istanbul ignore next */
      if (this._stopTime !== Infinity) {
        return;
      }

      when = Math.max(this.context.currentTime, this._startTime, toNumber(when));

      this._stopTime = when;
      this._stopFrame = Math.round(when * this.sampleRate);
    }
  }]);

  return AudioScheduledSourceNode;
}(AudioSourceNode);

module.exports = AudioScheduledSourceNode;