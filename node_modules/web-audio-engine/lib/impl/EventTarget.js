"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var events = require("events");

var EventTarget = function () {
  function EventTarget() {
    _classCallCheck(this, EventTarget);

    this._emitter = new events.EventEmitter();
  }

  /**
   * @param {string}   type
   * @param {function} listener
   */


  _createClass(EventTarget, [{
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      /* istanbul ignore else */
      if (typeof listener === "function") {
        this._emitter.addListener(type, listener);
      }
    }

    /**
     * @param {string}   type
     * @param {function} listener
     */

  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener) {
      /* istanbul ignore else */
      if (typeof listener === "function") {
        this._emitter.removeListener(type, listener);
      }
    }

    /**
     * @param {string}   type
     * @param {function} oldListener
     * @param {function} newListener
     */

  }, {
    key: "replaceEventListener",
    value: function replaceEventListener(type, oldListener, newListener) {
      this.removeEventListener(type, oldListener);
      this.addEventListener(type, newListener);
    }

    /**
     * @param {object} event
     * @param {string} event.type
     */

  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      this._emitter.emit(event.type, event);
    }
  }]);

  return EventTarget;
}();

module.exports = EventTarget;