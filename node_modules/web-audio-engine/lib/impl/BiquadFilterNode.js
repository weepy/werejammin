"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");
var BiquadFilterNodeDSP = require("./dsp/BiquadFilterNode");

var _require = require("../utils"),
    defaults = _require.defaults;

var _require2 = require("../constants/ChannelCountMode"),
    MAX = _require2.MAX;

var _require3 = require("../constants/AudioParamRate"),
    CONTROL_RATE = _require3.CONTROL_RATE;

var _require4 = require("../constants/BiquadFilterType"),
    LOWPASS = _require4.LOWPASS;

var _require5 = require("../constants/BiquadFilterType"),
    HIGHPASS = _require5.HIGHPASS;

var _require6 = require("../constants/BiquadFilterType"),
    BANDPASS = _require6.BANDPASS;

var _require7 = require("../constants/BiquadFilterType"),
    LOWSHELF = _require7.LOWSHELF;

var _require8 = require("../constants/BiquadFilterType"),
    HIGHSHELF = _require8.HIGHSHELF;

var _require9 = require("../constants/BiquadFilterType"),
    PEAKING = _require9.PEAKING;

var _require10 = require("../constants/BiquadFilterType"),
    NOTCH = _require10.NOTCH;

var _require11 = require("../constants/BiquadFilterType"),
    ALLPASS = _require11.ALLPASS;

var allowedBiquadFilterTypes = [LOWPASS, HIGHPASS, BANDPASS, LOWSHELF, HIGHSHELF, PEAKING, NOTCH, ALLPASS];

var DEFAULT_TYPE = LOWPASS;
var DEFAULT_FREQUENCY = 350;
var DEFAULT_DETUNE = 0;
var DEFAULT_Q = 1;
var DEFAULT_GAIN = 0;

var BiquadFilterNode = function (_AudioNode) {
  _inherits(BiquadFilterNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {string}       opts.type
   * @param {number}       opts.frequency
   * @param {number}       opts.detune
   * @param {number}       opts.Q
   * @param {number}       opts.gain
   */
  function BiquadFilterNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, BiquadFilterNode);

    var type = defaults(opts.type, DEFAULT_TYPE);
    var frequency = defaults(opts.frequency, DEFAULT_FREQUENCY);
    var detune = defaults(opts.detune, DEFAULT_DETUNE);
    var Q = defaults(opts.Q, DEFAULT_Q);
    var gain = defaults(opts.gain, DEFAULT_GAIN);

    var _this = _possibleConstructorReturn(this, (BiquadFilterNode.__proto__ || Object.getPrototypeOf(BiquadFilterNode)).call(this, context, opts, {
      inputs: [1],
      outputs: [1],
      channelCount: 2,
      channelCountMode: MAX
    }));

    _this._type = type;
    _this._frequency = _this.addParam(CONTROL_RATE, frequency);
    _this._detune = _this.addParam(CONTROL_RATE, detune);
    _this._Q = _this.addParam(CONTROL_RATE, Q);
    _this._gain = _this.addParam(CONTROL_RATE, gain);

    _this.dspInit();
    _this.dspUpdateKernel(1);
    return _this;
  }

  /**
   * @return {string}
   */


  _createClass(BiquadFilterNode, [{
    key: "getType",
    value: function getType() {
      return this._type;
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setType",
    value: function setType(value) {
      /* istanbul ignore else */
      if (allowedBiquadFilterTypes.indexOf(value) !== -1) {
        this._type = value;
      }
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getFrequency",
    value: function getFrequency() {
      return this._frequency;
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getDetune",
    value: function getDetune() {
      return this._detune;
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getQ",
    value: function getQ() {
      return this._Q;
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getGain",
    value: function getGain() {
      return this._gain;
    }

    /**
     * @param {Float32Array} frequencyHz
     * @param {Float32Array} magResponse
     * @param {Float32Array} phaseResponse
     */

  }, {
    key: "getFrequencyResponse",
    value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      this.dspGetFrequencyResponse(frequencyHz, magResponse, phaseResponse);
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "channelDidUpdate",
    value: function channelDidUpdate(numberOfChannels) {
      this.dspUpdateKernel(numberOfChannels);
      this.outputs[0].setNumberOfChannels(numberOfChannels);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getTailTime",
    value: function getTailTime() {
      return 0.2;
    }
  }]);

  return BiquadFilterNode;
}(AudioNode);

Object.assign(BiquadFilterNode.prototype, BiquadFilterNodeDSP);

module.exports = BiquadFilterNode;