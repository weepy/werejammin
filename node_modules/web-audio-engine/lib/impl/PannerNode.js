"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BasePannerNode = require("./BasePannerNode");
var PannerNodeDSP = require("./dsp/PannerNode");

var PannerNode = function (_BasePannerNode) {
  _inherits(PannerNode, _BasePannerNode);

  /**
   * @param {AudioContext} context
   */
  function PannerNode(context, opts) {
    _classCallCheck(this, PannerNode);

    return _possibleConstructorReturn(this, (PannerNode.__proto__ || Object.getPrototypeOf(PannerNode)).call(this, context, opts));
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} z
   */
  /* istanbul ignore next */


  _createClass(PannerNode, [{
    key: "setPosition",
    value: function setPosition() {
      throw new TypeError("NOT YET IMPLEMENTED");
    }

    /**
     * @param {number} x
     * @param {number} y
     * @param {number} z
     */
    /* istanbul ignore next */

  }, {
    key: "setOrientation",
    value: function setOrientation() {
      throw new TypeError("NOT YET IMPLEMENTED");
    }

    /**
     * @param {number} x
     * @param {number} y
     * @param {number} z
     */
    /* istanbul ignore next */

  }, {
    key: "setVelocity",
    value: function setVelocity() {
      throw new TypeError("NOT YET IMPLEMENTED");
    }
  }]);

  return PannerNode;
}(BasePannerNode);

Object.assign(PannerNode.prototype, PannerNodeDSP);

module.exports = PannerNode;