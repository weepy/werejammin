"use strict";

var StereoPannerNodeDSP = {
  dspProcess: function dspProcess() {
    var inputBus = this.inputs[0].bus;
    var outputBus = this.outputs[0].bus;

    if (inputBus.isSilent) {
      outputBus.zeros();
      return;
    }

    var panParam = this._pan;

    if (panParam.hasSampleAccurateValues()) {
      this.dspSampleAccurateValues(inputBus, outputBus, panParam.getSampleAccurateValues(), this.blockSize);
    } else {
      this.dspStaticValue(inputBus, outputBus, panParam.getValue(), this.blockSize);
    }
  },
  dspSampleAccurateValues: function dspSampleAccurateValues(inputBus, outputBus, panValues, blockSize) {
    var outputs = outputBus.getMutableData();
    var numberOfChannels = inputBus.getNumberOfChannels();

    if (numberOfChannels === 1) {
      var input = inputBus.getChannelData()[0];

      for (var i = 0; i < blockSize; i++) {
        var panValue = Math.max(-1, Math.min(panValues[i], +1));
        var panRadian = (panValue * 0.5 + 0.5) * 0.5 * Math.PI;
        var gainL = Math.cos(panRadian);
        var gainR = Math.sin(panRadian);

        outputs[0][i] = input[i] * gainL;
        outputs[1][i] = input[i] * gainR;
      }
    } else {
      var inputs = inputBus.getChannelData();

      for (var _i = 0; _i < blockSize; _i++) {
        var _panValue = Math.max(-1, Math.min(panValues[_i], +1));
        var _panRadian = (_panValue <= 0 ? _panValue + 1 : _panValue) * 0.5 * Math.PI;
        var _gainL = Math.cos(_panRadian);
        var _gainR = Math.sin(_panRadian);

        if (_panValue <= 0) {
          outputs[0][_i] = inputs[0][_i] + inputs[1][_i] * _gainL;
          outputs[1][_i] = inputs[1][_i] * _gainR;
        } else {
          outputs[0][_i] = inputs[0][_i] * _gainL;
          outputs[1][_i] = inputs[1][_i] + inputs[0][_i] * _gainR;
        }
      }
    }
  },
  dspStaticValue: function dspStaticValue(inputBus, outputBus, panValue, blockSize) {
    var outputs = outputBus.getMutableData();
    var numberOfChannels = inputBus.getNumberOfChannels();

    panValue = Math.max(-1, Math.min(panValue, +1));

    if (numberOfChannels === 1) {
      var input = inputBus.getChannelData()[0];
      var panRadian = (panValue * 0.5 + 0.5) * 0.5 * Math.PI;
      var gainL = Math.cos(panRadian);
      var gainR = Math.sin(panRadian);

      for (var i = 0; i < blockSize; i++) {
        outputs[0][i] = input[i] * gainL;
        outputs[1][i] = input[i] * gainR;
      }
    } else {
      var inputs = inputBus.getChannelData();
      var _panRadian2 = (panValue <= 0 ? panValue + 1 : panValue) * 0.5 * Math.PI;
      var _gainL2 = Math.cos(_panRadian2);
      var _gainR2 = Math.sin(_panRadian2);

      if (panValue <= 0) {
        for (var _i2 = 0; _i2 < blockSize; _i2++) {
          outputs[0][_i2] = inputs[0][_i2] + inputs[1][_i2] * _gainL2;
          outputs[1][_i2] = inputs[1][_i2] * _gainR2;
        }
      } else {
        for (var _i3 = 0; _i3 < blockSize; _i3++) {
          outputs[0][_i3] = inputs[0][_i3] * _gainL2;
          outputs[1][_i3] = inputs[1][_i3] + inputs[0][_i3] * _gainR2;
        }
      }
    }
  }
};

module.exports = StereoPannerNodeDSP;