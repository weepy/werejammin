"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BiquadFilterKernel = function () {
  function BiquadFilterKernel() {
    _classCallCheck(this, BiquadFilterKernel);

    this.coefficients = [0, 0, 0, 0, 0];
    this._x1 = 0;
    this._x2 = 0;
    this._y1 = 0;
    this._y2 = 0;
  }

  _createClass(BiquadFilterKernel, [{
    key: "process",
    value: function process(input, output, inNumSamples) {
      var b0 = this.coefficients[0];
      var b1 = this.coefficients[1];
      var b2 = this.coefficients[2];
      var a1 = this.coefficients[3];
      var a2 = this.coefficients[4];

      var x0 = void 0;
      var x1 = this._x1;
      var x2 = this._x2;
      var y0 = void 0;
      var y1 = this._y1;
      var y2 = this._y2;

      for (var i = 0; i < inNumSamples; i++) {
        x0 = input[i];
        y0 = b0 * x0 + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;

        x2 = x1;
        x1 = x0;
        y2 = y1;
        y1 = y0;

        output[i] = y0;
      }

      this._x1 = flushDenormalFloatToZero(x1);
      this._x2 = flushDenormalFloatToZero(x2);
      this._y1 = flushDenormalFloatToZero(y1);
      this._y2 = flushDenormalFloatToZero(y2);
    }
  }, {
    key: "processWithCoefficients",
    value: function processWithCoefficients(input, output, inNumSamples, coefficients) {
      var b0 = this.coefficients[0];
      var b1 = this.coefficients[1];
      var b2 = this.coefficients[2];
      var a1 = this.coefficients[3];
      var a2 = this.coefficients[4];
      var x0 = void 0;
      var x1 = this._x1;
      var x2 = this._x2;
      var y0 = void 0;
      var y1 = this._y1;
      var y2 = this._y2;

      var step = 1 / inNumSamples;
      var b0Incr = (coefficients[0] - b0) * step;
      var b1Incr = (coefficients[1] - b1) * step;
      var b2Incr = (coefficients[2] - b2) * step;
      var a1Incr = (coefficients[3] - a1) * step;
      var a2Incr = (coefficients[4] - a2) * step;

      for (var i = 0; i < inNumSamples; i++) {
        x0 = input[i];
        y0 = b0 * x0 + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;

        x2 = x1;
        x1 = x0;
        y2 = y1;
        y1 = y0;

        b0 += b0Incr;
        b1 += b1Incr;
        b2 += b2Incr;
        a1 += a1Incr;
        a2 += a2Incr;

        output[i] = y0;
      }

      this._x1 = flushDenormalFloatToZero(x1);
      this._x2 = flushDenormalFloatToZero(x2);
      this._y1 = flushDenormalFloatToZero(y1);
      this._y2 = flushDenormalFloatToZero(y2);
      this.coefficients = coefficients;
    }
  }]);

  return BiquadFilterKernel;
}();

function flushDenormalFloatToZero(f) {
  return Math.abs(f) < 1.175494e-38 ? 0.0 : f;
}

module.exports = BiquadFilterKernel;