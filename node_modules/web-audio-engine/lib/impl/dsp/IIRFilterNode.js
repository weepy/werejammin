"use strict";

var IIRFilterKernel = require("./IIRFilterKernel");

var _require = require("../../utils/FilterUtils"),
    getFilterResponse = _require.getFilterResponse;

var IIRFilterNodeDSP = {
  dspInit: function dspInit() {
    this._kernels = [];
  },
  dspUpdateKernel: function dspUpdateKernel(numberOfChannels) {
    if (numberOfChannels < this._kernels.length) {
      this._kernels.splice(numberOfChannels);
    } else if (this._kernels.length < numberOfChannels) {
      while (numberOfChannels !== this._kernels.length) {
        this._kernels.push(new IIRFilterKernel(this._feedforward, this._feedback));
      }
    }

    switch (numberOfChannels) {
      case 1:
        this.dspProcess = this.dspProcess1;
        break;
      case 2:
        this.dspProcess = this.dspProcess2;
        break;
      default:
        this.dspProcess = this.dspProcessN;
        break;
    }
  },
  dspProcess1: function dspProcess1() {
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    kernels[0].process(inputs[0], outputs[0], this.blockSize);
  },
  dspProcess2: function dspProcess2() {
    var blockSize = this.blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    kernels[0].process(inputs[0], outputs[0], blockSize);
    kernels[1].process(inputs[1], outputs[1], blockSize);
  },
  dspProcessN: function dspProcessN() {
    var blockSize = this.blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    for (var i = 0, imax = kernels.length; i < imax; i++) {
      kernels[i].process(inputs[i], outputs[i], blockSize);
    }
  },
  dspGetFrequencyResponse: function dspGetFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
    var b = this._feedforward;
    var a = this._feedback;

    getFilterResponse(b, a, frequencyHz, magResponse, phaseResponse, this.sampleRate);
  }
};

module.exports = IIRFilterNodeDSP;