"use strict";

var AudioBuffer = require("../AudioBuffer");

var _require = require("../../utils"),
    fill = _require.fill;

var ScriptProcessorNodeDSP = {
  dspInit: function dspInit() {
    this._eventItem = null;
    this._inputChannelData = null;
    this._outputChannelData = null;
    this._writeIndex = 0;
  },
  dspSetEventItem: function dspSetEventItem(eventItem) {
    var numberOfInputChannels = this.inputs[0].getNumberOfChannels();
    var numberOfOutputChannels = this.outputs[0].getNumberOfChannels();
    var inputBuffer = new AudioBuffer({
      numberOfChannels: numberOfInputChannels, length: this._bufferSize, sampleRate: this.sampleRate
    });
    var outputBuffer = new AudioBuffer({
      numberOfChannels: numberOfOutputChannels, length: this._bufferSize, sampleRate: this.sampleRate
    });

    eventItem.inputBuffer._impl = inputBuffer;
    eventItem.outputBuffer._impl = outputBuffer;

    this._inputChannelData = inputBuffer.audioData.channelData;
    this._outputChannelData = outputBuffer.audioData.channelData;

    this._eventItem = eventItem;
  },
  dspProcess: function dspProcess() {
    var _this = this;

    var blockSize = this.blockSize;
    var quantumStartFrame = this.context.currentSampleFrame;
    var quantumEndFrame = quantumStartFrame + blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var inputChannelData = this._inputChannelData;
    var outputChannelData = this._outputChannelData;
    var numberOfInputChannels = inputs.length;
    var numberOfOutputChannels = outputs.length;
    var copyFrom = this._writeIndex;
    var copyTo = copyFrom + blockSize;

    for (var ch = 0; ch < numberOfInputChannels; ch++) {
      inputChannelData[ch].set(inputs[ch], copyFrom);
    }
    for (var _ch = 0; _ch < numberOfOutputChannels; _ch++) {
      outputs[_ch].set(outputChannelData[_ch].subarray(copyFrom, copyTo));
    }

    this._writeIndex += blockSize;

    if (this._writeIndex === this._bufferSize) {
      var playbackTime = quantumEndFrame / this.sampleRate;

      this.context.addPostProcess(function () {
        for (var _ch2 = 0; _ch2 < numberOfOutputChannels; _ch2++) {
          fill(outputChannelData[_ch2], 0);
        }
        _this._eventItem.playbackTime = playbackTime;
        _this.dispatchEvent(_this._eventItem);
      });
      this._writeIndex = 0;
    }
  }
};

module.exports = ScriptProcessorNodeDSP;