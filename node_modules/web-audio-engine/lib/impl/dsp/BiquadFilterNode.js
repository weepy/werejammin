"use strict";

var BiquadCoeffs = require("biquad-coeffs-webaudio");
var BiquadFilterKernel = require("./BiquadFilterKernel");

var _require = require("../../utils/FilterUtils"),
    getFilterResponse = _require.getFilterResponse;

var BiquadFilterNodeDSP = {
  dspInit: function dspInit() {
    this._kernels = [];
    this._quantumStartFrame = -1;
    this._coefficients = [0, 0, 0, 0, 0];
    this._prevFrequency = 0;
    this._prevDetune = 0;
    this._prevQ = 0;
    this._prevGain = 0;
  },
  dspUpdateKernel: function dspUpdateKernel(numberOfChannels) {
    if (numberOfChannels < this._kernels.length) {
      this._kernels.splice(numberOfChannels);
    } else if (this._kernels.length < numberOfChannels) {
      while (numberOfChannels !== this._kernels.length) {
        this._kernels.push(new BiquadFilterKernel(this, this._kernels.length));
      }
    }

    switch (numberOfChannels) {
      case 1:
        this.dspProcess = this.dspProcess1;
        break;
      case 2:
        this.dspProcess = this.dspProcess2;
        break;
      default:
        this.dspProcess = this.dspProcessN;
        break;
    }
  },
  dspProcess1: function dspProcess1() {
    var blockSize = this.blockSize;
    var quantumStartFrame = this.context.currentSampleFrame;
    var quantumEndFrame = quantumStartFrame + blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var isCoefficientsUpdated = this.dspUpdateCoefficients();
    var coefficients = this._coefficients;
    var kernels = this._kernels;

    if (quantumStartFrame !== this._quantumStartFrame) {
      kernels[0].coefficients = coefficients;
      kernels[0].process(inputs[0], outputs[0], blockSize);
    } else if (isCoefficientsUpdated) {
      kernels[0].processWithCoefficients(inputs[0], outputs[0], blockSize, coefficients);
    } else {
      kernels[0].process(inputs[0], outputs[0], blockSize);
    }

    this._quantumStartFrame = quantumEndFrame;
  },
  dspProcess2: function dspProcess2() {
    var blockSize = this.blockSize;
    var quantumStartFrame = this.context.currentSampleFrame;
    var quantumEndFrame = quantumStartFrame + blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var isCoefficientsUpdated = this.dspUpdateCoefficients();
    var coefficients = this._coefficients;
    var kernels = this._kernels;

    if (quantumStartFrame !== this._quantumStartFrame) {
      kernels[0].coefficients = coefficients;
      kernels[1].coefficients = coefficients;
      kernels[0].process(inputs[0], outputs[0], blockSize);
      kernels[1].process(inputs[1], outputs[1], blockSize);
    } else if (isCoefficientsUpdated) {
      kernels[0].processWithCoefficients(inputs[0], outputs[0], blockSize, coefficients);
      kernels[1].processWithCoefficients(inputs[1], outputs[1], blockSize, coefficients);
    } else {
      kernels[0].process(inputs[0], outputs[0], blockSize);
      kernels[1].process(inputs[1], outputs[1], blockSize);
    }

    this._quantumStartFrame = quantumEndFrame;
  },
  dspProcessN: function dspProcessN() {
    var blockSize = this.blockSize;
    var quantumStartFrame = this.context.currentSampleFrame;
    var quantumEndFrame = quantumStartFrame + blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var isCoefficientsUpdated = this.dspUpdateCoefficients();
    var coefficients = this._coefficients;
    var kernels = this._kernels;

    if (quantumStartFrame !== this._quantumStartFrame) {
      for (var i = 0, imax = kernels.length; i < imax; i++) {
        kernels[i].coefficients = coefficients;
        kernels[i].process(inputs[i], outputs[i], blockSize);
      }
    } else if (isCoefficientsUpdated) {
      for (var _i = 0, _imax = kernels.length; _i < _imax; _i++) {
        kernels[_i].processWithCoefficients(inputs[_i], outputs[_i], blockSize, coefficients);
      }
    } else {
      for (var _i2 = 0, _imax2 = kernels.length; _i2 < _imax2; _i2++) {
        kernels[_i2].process(inputs[_i2], outputs[_i2], blockSize);
      }
    }

    this._quantumStartFrame = quantumEndFrame;
  },
  dspUpdateCoefficients: function dspUpdateCoefficients() {
    var frequency = this._frequency.getSampleAccurateValues()[0];
    var detune = this._detune.getSampleAccurateValues()[0];
    var Q = this._Q.getSampleAccurateValues()[0];
    var gain = this._gain.getSampleAccurateValues()[0];

    if (frequency === this._prevFrequency && detune === this._prevDetune && Q === this._prevQ && gain === this._prevGain) {
      return false;
    }

    var normalizedFrequency = frequency / this.sampleRate * Math.pow(2, detune / 1200);

    this._coefficients = BiquadCoeffs[this._type](normalizedFrequency, Q, gain);
    this._prevFrequency = frequency;
    this._prevDetune = detune;
    this._prevQ = Q;
    this._prevGain = gain;

    return true;
  },
  dspGetFrequencyResponse: function dspGetFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
    var frequency = this._frequency.getValue();
    var detune = this._detune.getValue();
    var Q = this._Q.getValue();
    var gain = this._gain.getValue();
    var normalizedFrequency = frequency / this.sampleRate * Math.pow(2, detune / 1200);
    var coefficients = BiquadCoeffs[this._type](normalizedFrequency, Q, gain);

    var b = [coefficients[0], coefficients[1], coefficients[2]];
    var a = [1, coefficients[3], coefficients[4]];

    getFilterResponse(b, a, frequencyHz, magResponse, phaseResponse, this.sampleRate);
  }
};

module.exports = BiquadFilterNodeDSP;