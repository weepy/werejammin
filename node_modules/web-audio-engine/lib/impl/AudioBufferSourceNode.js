"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioScheduledSourceNode = require("./AudioScheduledSourceNode");
var AudioBuffer = require("./AudioBuffer");
var AudioBufferSourceNodeDSP = require("./dsp/AudioBufferSourceNode");

var _require = require("../utils"),
    defaults = _require.defaults;

var _require2 = require("../utils"),
    toImpl = _require2.toImpl,
    toNumber = _require2.toNumber;

var _require3 = require("../constants/AudioParamRate"),
    CONTROL_RATE = _require3.CONTROL_RATE;

var _require4 = require("../constants/PlaybackState"),
    FINISHED = _require4.FINISHED;

var DEFAULT_PLAYBACK_RATE = 1;
var DEFAULT_DETUNE = 0;
var DEFAULT_LOOP = false;
var DEFAULT_LOOP_START = 0;
var DEFAULT_LOOP_END = 0;

var AudioBufferSourceNode = function (_AudioScheduledSource) {
  _inherits(AudioBufferSourceNode, _AudioScheduledSource);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.playbackRate
   * @param {number}       opts.detune
   * @param {boolean}      opts.loop
   * @param {number}       opts.loopStart
   * @param {number}       opts.loopEnd
   */
  function AudioBufferSourceNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AudioBufferSourceNode);

    var playbackRate = defaults(opts.playbackRate, DEFAULT_PLAYBACK_RATE);
    var detune = defaults(opts.detune, DEFAULT_DETUNE);
    var loop = defaults(opts.loop, DEFAULT_LOOP);
    var loopStart = defaults(opts.loopStart, DEFAULT_LOOP_START);
    var loopEnd = defaults(opts.loopEnd, DEFAULT_LOOP_END);

    var _this = _possibleConstructorReturn(this, (AudioBufferSourceNode.__proto__ || Object.getPrototypeOf(AudioBufferSourceNode)).call(this, context, opts));

    _this._buffer = null;
    _this._audioData = null;
    _this._playbackRate = _this.addParam(CONTROL_RATE, playbackRate);
    _this._detune = _this.addParam(CONTROL_RATE, detune);
    _this._loop = !!loop;
    _this._loopStart = loopStart;
    _this._loopEnd = loopEnd;
    _this._offset = 0;
    _this._duration = Infinity;
    _this._done = false;
    return _this;
  }

  /**
   * @return {AudioBuffer}
   */


  _createClass(AudioBufferSourceNode, [{
    key: "getBuffer",
    value: function getBuffer() {
      return this._buffer;
    }

    /**
     * @param {AudioBuffer} value
     */

  }, {
    key: "setBuffer",
    value: function setBuffer(value) {
      value = toImpl(value);

      /* istanbul ignore else */
      if (value instanceof AudioBuffer) {
        this._buffer = value;
        this._audioData = this._buffer.audioData;
        this.outputs[0].setNumberOfChannels(this._audioData.numberOfChannels);
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getStartOffset",
    value: function getStartOffset() {
      return this._offset;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getStartDuration",
    value: function getStartDuration() {
      if (this._duration !== Infinity) {
        return this._duration;
      }
    }

    /**
     * @return {string}
     */

  }, {
    key: "getPlaybackState",
    value: function getPlaybackState() {
      if (this._done) {
        return FINISHED;
      }
      return _get(AudioBufferSourceNode.prototype.__proto__ || Object.getPrototypeOf(AudioBufferSourceNode.prototype), "getPlaybackState", this).call(this);
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getPlaybackRate",
    value: function getPlaybackRate() {
      return this._playbackRate;
    }

    /**
     * @return {AudioParam}
     */

  }, {
    key: "getDetune",
    value: function getDetune() {
      return this._detune;
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "getLoop",
    value: function getLoop() {
      return this._loop;
    }

    /**
     * @param {boolean}
     */

  }, {
    key: "setLoop",
    value: function setLoop(value) {
      this._loop = !!value;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getLoopStart",
    value: function getLoopStart() {
      return this._loopStart;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setLoopStart",
    value: function setLoopStart(value) {
      value = Math.max(0, toNumber(value));
      this._loopStart = value;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getLoopEnd",
    value: function getLoopEnd() {
      return this._loopEnd;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setLoopEnd",
    value: function setLoopEnd(value) {
      value = Math.max(0, toNumber(value));
      this._loopEnd = value;
    }

    /**
     * @param {number} when
     * @param {number} offset
     * @param {number} duration
     */

  }, {
    key: "start",
    value: function start(when, offset, duration) {
      var _this2 = this;

      /* istanbul ignore next */
      if (this._startTime !== Infinity) {
        return;
      }

      offset = defaults(offset, 0);
      duration = defaults(duration, Infinity);

      when = Math.max(this.context.currentTime, toNumber(when));
      offset = Math.max(0, offset);
      duration = Math.max(0, toNumber(duration));

      this._startTime = when;
      this._startFrame = Math.round(when * this.sampleRate);
      this._offset = offset;

      if (duration !== Infinity) {
        this._duration = duration;
        this._stopFrame = Math.round((this._startTime + duration) * this.sampleRate);
      }

      this.context.sched(when, function () {
        _this2.dspStart();
        _this2.outputs[0].enable();
      });
    }
  }]);

  return AudioBufferSourceNode;
}(AudioScheduledSourceNode);

Object.assign(AudioBufferSourceNode.prototype, AudioBufferSourceNodeDSP);

module.exports = AudioBufferSourceNode;