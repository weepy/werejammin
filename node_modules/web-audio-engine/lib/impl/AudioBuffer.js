"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioData = require("./core/AudioData");

var _require = require("../utils"),
    toValidNumberOfChannels = _require.toValidNumberOfChannels,
    toNumber = _require.toNumber,
    toValidSampleRate = _require.toValidSampleRate;

/**
 * @prop {AudioData} audioData
 */


var AudioBuffer = function () {
  /**
   * @param {object}       opts
   * @param {number}       opts.numberOfChannels
   * @param {number}       opts.length
   * @param {number}       opts.sampleRate
   */
  function AudioBuffer() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AudioBuffer);

    var numberOfChannels = opts.numberOfChannels;
    var length = opts.length;
    var sampleRate = opts.sampleRate;

    numberOfChannels = toValidNumberOfChannels(numberOfChannels);
    length = Math.max(0, toNumber(length));
    sampleRate = toValidSampleRate(sampleRate);

    this.audioData = new AudioData(numberOfChannels, length, sampleRate);
  }

  /**
   * @return {number}
   */


  _createClass(AudioBuffer, [{
    key: "getSampleRate",
    value: function getSampleRate() {
      return this.audioData.sampleRate;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getLength",
    value: function getLength() {
      return this.audioData.length;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.audioData.length / this.audioData.sampleRate;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getNumberOfChannels",
    value: function getNumberOfChannels() {
      return this.audioData.numberOfChannels;
    }

    /**
     * @return {Float32Array}
     */

  }, {
    key: "getChannelData",
    value: function getChannelData(channel) {
      return this.audioData.channelData[channel | 0];
    }

    /**
     * @param {Float32Array} destination
     * @param {number}       channelNumber
     * @param {number}       startInChannel
     */

  }, {
    key: "copyFromChannel",
    value: function copyFromChannel(destination, channelNumber, startInChannel) {
      var source = this.audioData.channelData[channelNumber | 0];

      startInChannel = startInChannel | 0;

      destination.set(source.subarray(startInChannel, startInChannel + destination.length));
    }

    /**
     * @param {Float32Array} source
     * @param {number}       channelNumber
     * @param {number}       startInChannel
     */

  }, {
    key: "copyToChannel",
    value: function copyToChannel(source, channelNumber, startInChannel) {
      var destination = this.audioData.channelData[channelNumber | 0];

      startInChannel = startInChannel | 0;

      destination.set(source, startInChannel);
    }
  }]);

  return AudioBuffer;
}();

module.exports = AudioBuffer;