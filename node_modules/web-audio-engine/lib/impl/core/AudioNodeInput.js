"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioBus = require("./AudioBus");

var _require = require("../../utils"),
    toValidNumberOfChannels = _require.toValidNumberOfChannels;

var _require2 = require("../../constants/ChannelCountMode"),
    CLAMPED_MAX = _require2.CLAMPED_MAX,
    EXPLICIT = _require2.EXPLICIT;

var _require3 = require("../../constants/ChannelInterpretation"),
    SPEAKERS = _require3.SPEAKERS;

/**
 * @prop {AudioNode} node
 * @prop {number}    index
 * @prop {AudioBus}  bus
 */


var AudioNodeInput = function () {
  /**
   * @param {object}    opts
   * @param {AudioNode} opts.node
   * @param {number}    opts.index
   * @param {number}    opts.numberOfChannels
   * @param {number}    opts.channelCount
   * @param {string}    opts.channelCountMode
   */
  function AudioNodeInput(opts) {
    _classCallCheck(this, AudioNodeInput);

    var node = opts.node;
    var index = opts.index;
    var numberOfChannels = opts.numberOfChannels;
    var channelCount = opts.channelCount;
    var channelCountMode = opts.channelCountMode;

    this.node = node;
    this.index = index | 0;
    this.bus = new AudioBus(numberOfChannels, node.blockSize, node.sampleRate);

    this.bus.setChannelInterpretation(SPEAKERS);
    this.outputs = [];
    this._disabledOutputs = new WeakSet();
    this._channelCount = channelCount | 0;
    this._channelCountMode = channelCountMode;
  }

  /**
   * @return {number}
   */


  _createClass(AudioNodeInput, [{
    key: "getChannelCount",
    value: function getChannelCount() {
      return this._channelCount;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setChannelCount",
    value: function setChannelCount(value) {
      var channelCount = toValidNumberOfChannels(value);

      /* istanbul ignore else */
      if (channelCount !== this._channelCount) {
        this._channelCount = channelCount;
        this.updateNumberOfChannels();
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getChannelCountMode",
    value: function getChannelCountMode() {
      return this._channelCountMode;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setChannelCountMode",
    value: function setChannelCountMode(value) {
      /* istanbul ignore else */
      if (value !== this._channelCountMode) {
        this._channelCountMode = value;
        this.updateNumberOfChannels();
      }
    }

    /**
     * @return {string}
     */

  }, {
    key: "getChannelInterpretation",
    value: function getChannelInterpretation() {
      return this.bus.getChannelInterpretation();
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setChannelInterpretation",
    value: function setChannelInterpretation(value) {
      this.bus.setChannelInterpretation(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getNumberOfChannels",
    value: function getNumberOfChannels() {
      return this.bus.getNumberOfChannels();
    }

    /**
     *
     */

  }, {
    key: "computeNumberOfChannels",
    value: function computeNumberOfChannels() {
      if (this._channelCountMode === EXPLICIT) {
        return this._channelCount;
      }

      var maxChannels = this.outputs.reduce(function (maxChannels, output) {
        return Math.max(maxChannels, output.getNumberOfChannels());
      }, 1);

      if (this._channelCountMode === CLAMPED_MAX) {
        return Math.min(this._channelCount, maxChannels);
      }

      return maxChannels;
    }

    /**
     *
     */

  }, {
    key: "updateNumberOfChannels",
    value: function updateNumberOfChannels() {
      var numberOfChannels = this.computeNumberOfChannels();

      /* istanbul ignore else */
      if (numberOfChannels !== this.bus.getNumberOfChannels()) {
        this.bus.setNumberOfChannels(numberOfChannels);
        this.node.channelDidUpdate(numberOfChannels);
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.outputs.length !== 0;
    }

    /**
     * @param {AudioNodeOutput} output
     */

  }, {
    key: "enableFrom",
    value: function enableFrom(output) {
      /* istanbul ignore else */
      if (moveItem(output, this._disabledOutputs, this.outputs)) {
        this.inputDidUpdate();
      }
    }

    /**
     * @param {AudioNodeOutput} output
     */

  }, {
    key: "disableFrom",
    value: function disableFrom(output) {
      /* istanbul ignore else */
      if (moveItem(output, this.outputs, this._disabledOutputs)) {
        this.inputDidUpdate();
      }
    }

    /**
     * @param {AudioNodeOutput} output
     */

  }, {
    key: "connectFrom",
    value: function connectFrom(output) {
      if (output.isEnabled()) {
        /* istanbul ignore else */
        if (addItem(output, this.outputs)) {
          this.inputDidUpdate();
        }
      } else {
        addItem(output, this._disabledOutputs);
      }
    }

    /**
     * @param {AudioNodeOutput} output
     */

  }, {
    key: "disconnectFrom",
    value: function disconnectFrom(output) {
      if (output.isEnabled()) {
        /* istanbul ignore else */
        if (removeItem(output, this.outputs)) {
          this.inputDidUpdate();
        }
      } else {
        removeItem(output, this._disabledOutputs);
      }
    }

    /**
     *
     */

  }, {
    key: "inputDidUpdate",
    value: function inputDidUpdate() {
      this.updateNumberOfChannels();
      if (this.outputs.length === 0) {
        this.node.disableOutputsIfNecessary();
      } else {
        this.node.enableOutputsIfNecessary();
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "isConnectedFrom",
    value: function isConnectedFrom(node) {
      var _this = this;

      return this.outputs.some(function (target) {
        return target.node === node;
      }) || !!(node && Array.isArray(node.outputs) && node.outputs.some(function (target) {
        return _this._disabledOutputs.has(target);
      }));
    }

    /**
     * @return {AudioBus}
     */

  }, {
    key: "sumAllConnections",
    value: function sumAllConnections() {
      var audioBus = this.bus;
      var outputs = this.outputs;

      audioBus.zeros();

      for (var i = 0, imax = outputs.length; i < imax; i++) {
        audioBus.sumFrom(outputs[i].pull());
      }

      return audioBus;
    }

    /**
     * @return {AudioBus}
     */

  }, {
    key: "pull",
    value: function pull() {
      if (this.outputs.length === 1) {
        var output = this.outputs[0];

        /* istanbul ignore else */
        if (output.getNumberOfChannels() === this.getNumberOfChannels()) {
          return this.bus.copyFrom(output.pull());
        }
      }

      return this.sumAllConnections();
    }
  }]);

  return AudioNodeInput;
}();

function addItem(target, destination) {
  if (destination instanceof WeakSet) {
    /* istanbul ignore next */
    if (destination.has(target)) {
      return false;
    }
    destination.add(target);
  } else {
    var index = destination.indexOf(target);

    /* istanbul ignore next */
    if (index !== -1) {
      return false;
    }
    destination.push(target);
  }
  return true;
}

function removeItem(target, source) {
  if (source instanceof WeakSet) {
    /* istanbul ignore next */
    if (!source.has(target)) {
      return false;
    }
    source.delete(target);
  } else {
    var index = source.indexOf(target);

    /* istanbul ignore next */
    if (index === -1) {
      return false;
    }
    source.splice(index, 1);
  }
  return true;
}

function moveItem(target, source, destination) {
  return removeItem(target, source) && addItem(target, destination);
}

module.exports = AudioNodeInput;