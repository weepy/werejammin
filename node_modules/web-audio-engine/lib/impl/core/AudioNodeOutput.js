"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioBus = require("./AudioBus");

/**
 * @prop {AudioNode} node
 * @prop {number}    index
 * @prop {AudioBus}  bus
 */

var AudioNodeOutput = function () {
  /**
   * @param {object} opts
   * @param {AudioNode} opts.node
   * @param {number}    opts.index
   * @param {number}    opts.numberOfChannels
   * @param {boolean}   opts.enabled
   */
  function AudioNodeOutput(opts) {
    _classCallCheck(this, AudioNodeOutput);

    var node = opts.node;
    var index = opts.index;
    var numberOfChannels = opts.numberOfChannels;
    var enabled = opts.enabled;

    this.node = node;
    this.index = index | 0;
    this.bus = new AudioBus(numberOfChannels, node.blockSize, node.sampleRate);
    this.inputs = [];
    this._enabled = !!enabled;
  }

  /**
   * @return {number}
   */


  _createClass(AudioNodeOutput, [{
    key: "getNumberOfChannels",
    value: function getNumberOfChannels() {
      return this.bus.getNumberOfChannels();
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "setNumberOfChannels",
    value: function setNumberOfChannels(numberOfChannels) {
      /* istanbul ignore else */
      if (numberOfChannels !== this.getNumberOfChannels()) {
        var channelInterpretation = this.node.getChannelInterpretation();

        this.bus.setNumberOfChannels(numberOfChannels, channelInterpretation);

        this.inputs.forEach(function (input) {
          input.updateNumberOfChannels();
        });
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this._enabled;
    }

    /**
     *
     */

  }, {
    key: "enable",
    value: function enable() {
      var _this = this;

      /* istanbul ignore else */
      if (!this._enabled) {
        this._enabled = true;
        this.inputs.forEach(function (input) {
          input.enableFrom(_this);
        });
      }
    }

    /**
     *
     */

  }, {
    key: "disable",
    value: function disable() {
      var _this2 = this;

      /* istanbul ignore else */
      if (this._enabled) {
        this._enabled = false;
        this.inputs.forEach(function (input) {
          input.disableFrom(_this2);
        });
      }
    }

    /**
     *
     */

  }, {
    key: "zeros",
    value: function zeros() {
      this.bus.zeros();
    }

    /**
     * @param {AudioNode|AudioParam} destination
     * @param {number}               index
     */

  }, {
    key: "connect",
    value: function connect(destination, input) {
      var target = destination.inputs[input | 0];

      if (this.inputs.indexOf(target) === -1) {
        this.inputs.push(target);
        target.connectFrom(this);
      }
    }

    /**
     *
     */

  }, {
    key: "disconnect",
    value: function disconnect() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var isTargetToDisconnect = args.length === 1 ? function (target) {
        return target.node === args[0];
      } : args.length === 2 ? function (target) {
        return target.node === args[0] && target.index === args[1];
      } : function () {
        return true;
      };

      for (var i = this.inputs.length - 1; i >= 0; i--) {
        var target = this.inputs[i];

        if (isTargetToDisconnect(target)) {
          target.disconnectFrom(this);
          this.inputs.splice(i, 1);
        }
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "isConnectedTo",
    value: function isConnectedTo(node) {
      return this.inputs.some(function (target) {
        return target.node === node;
      });
    }

    /**
     * @return {AudioBus}
     */

  }, {
    key: "pull",
    value: function pull() {
      this.node.processIfNecessary();
      return this.bus;
    }
  }]);

  return AudioNodeOutput;
}();

module.exports = AudioNodeOutput;