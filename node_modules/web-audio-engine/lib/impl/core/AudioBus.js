"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioData = require("./AudioData");

var _require = require("../../utils"),
    fill = _require.fill;

var _require2 = require("../../constants/ChannelInterpretation"),
    DISCRETE = _require2.DISCRETE;

var DSPAlgorithm = {};

/**
 * @prop {AudioData} audioData
 * @prop {boolean}   isSilent
 */

var AudioBus = function () {
  /**
   * @param {number} numberOfChannels
   * @param {number} length
   * @param {number} sampleRate
   */
  function AudioBus(numberOfChannels, length, sampleRate) {
    _classCallCheck(this, AudioBus);

    this.audioData = new AudioData(numberOfChannels, length, sampleRate);
    this.isSilent = true;
    this.channelInterpretation = DISCRETE;
  }

  /**
   * @return {string} [ SPEAKERS, DISCRETE ]
   */


  _createClass(AudioBus, [{
    key: "getChannelInterpretation",
    value: function getChannelInterpretation() {
      return this.channelInterpretation;
    }

    /**
     * @param {string} value - [ SPEAKERS, DISCRETE ]
     */

  }, {
    key: "setChannelInterpretation",
    value: function setChannelInterpretation(value) {
      this.channelInterpretation = value;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getNumberOfChannels",
    value: function getNumberOfChannels() {
      return this.audioData.numberOfChannels;
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "setNumberOfChannels",
    value: function setNumberOfChannels(numberOfChannels) {
      var audioBus = new AudioBus(numberOfChannels, this.getLength(), this.getSampleRate());

      audioBus.channelInterpretation = this.channelInterpretation;
      audioBus.sumFrom(this);

      this.audioData = audioBus.audioData;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getLength",
    value: function getLength() {
      return this.audioData.length;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getSampleRate",
    value: function getSampleRate() {
      return this.audioData.sampleRate;
    }

    /**
     * @return {Float32Array[]}
     */

  }, {
    key: "getChannelData",
    value: function getChannelData() {
      return this.audioData.channelData;
    }

    /**
     * @return {Float32Array[]}
     */

  }, {
    key: "getMutableData",
    value: function getMutableData() {
      this.isSilent = false;
      return this.audioData.channelData;
    }

    /**
     *
     */

  }, {
    key: "zeros",
    value: function zeros() {
      /* istanbul ignore else */
      if (!this.isSilent) {
        var channelData = this.audioData.channelData;

        for (var i = 0, imax = channelData.length; i < imax; i++) {
          fill(channelData[i], 0);
        }
      }
      this.isSilent = true;
    }

    /**
     * @param {AudioBus} audioBus
     */

  }, {
    key: "copyFrom",
    value: function copyFrom(audioBus) {
      var source = audioBus.audioData.channelData;
      var destination = this.audioData.channelData;
      var numberOfChannels = destination.length;

      for (var ch = 0; ch < numberOfChannels; ch++) {
        destination[ch].set(source[ch]);
      }

      this.isSilent = audioBus.isSilent;
    }

    /**
     * @param {AudioBus} audioBus
     * @param {number}   offset
     */

  }, {
    key: "copyFromWithOffset",
    value: function copyFromWithOffset(audioBus, offset) {
      var source = audioBus.audioData.channelData;
      var destination = this.audioData.channelData;
      var numberOfChannels = destination.length;

      offset = offset | 0;

      for (var ch = 0; ch < numberOfChannels; ch++) {
        destination[ch].set(source[ch], offset);
      }

      this.isSilent = this.isSilent && audioBus.isSilent;
    }

    /**
     * @param {AudioBus} audioBus
     */

  }, {
    key: "sumFrom",
    value: function sumFrom(audioBus) {

      /* istanbul ignore next */
      if (audioBus.isSilent) {
        return;
      }

      var source = audioBus.audioData.channelData;
      var destination = this.audioData.channelData;

      this._sumFrom(source, destination, audioBus.getLength());
    }

    /**
     * @param {AudioBus} audioBus
     * @param {number}   offset
     */

  }, {
    key: "sumFromWithOffset",
    value: function sumFromWithOffset(audioBus, offset) {

      /* istanbul ignore next */
      if (audioBus.isSilent) {
        return;
      }

      offset = offset | 0;

      var source = audioBus.audioData.channelData;
      var destination = this.audioData.channelData.map(function (data) {
        return data.subarray(offset);
      });

      this._sumFrom(source, destination, audioBus.getLength());
    }

    /**
     * @private
     */

  }, {
    key: "_sumFrom",
    value: function _sumFrom(source, destination, length) {
      var mixFunction = void 0;
      var algoIndex = source.length * 1000 + destination.length;

      if (this.channelInterpretation === DISCRETE) {
        algoIndex += 2000000;
      } else {
        algoIndex += 1000000;
      }

      mixFunction = DSPAlgorithm[algoIndex] || DSPAlgorithm[0];

      if (this.isSilent && mixFunction.set) {
        mixFunction = mixFunction.set;
      }

      mixFunction(source, destination, length);

      this.isSilent = false;
    }
  }]);

  return AudioBus;
}();

DSPAlgorithm[0] = function (source, destination, length) {
  var numberOfChannels = Math.min(source.length, destination.length);

  for (var ch = 0; ch < numberOfChannels; ch++) {
    for (var i = 0; i < length; i++) {
      destination[ch][i] += source[ch][i];
    }
  }
};
DSPAlgorithm[0].set = function (source, destination) {
  var numberOfChannels = Math.min(source.length, destination.length);

  for (var ch = 0; ch < numberOfChannels; ch++) {
    destination[ch].set(source[ch]);
  }
};

DSPAlgorithm[1001001] = function (source, destination, length) {
  var output = destination[0];
  var input = source[0];

  for (var i = 0; i < length; i++) {
    output[i] += input[i];
  }
};
DSPAlgorithm[1001001].set = function (source, destination) {
  destination[0].set(source[0]);
};
DSPAlgorithm[2001001] = DSPAlgorithm[1001001];
DSPAlgorithm[2001001].set = DSPAlgorithm[1001001].set;

DSPAlgorithm[1001002] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var input = source[0];

  for (var i = 0; i < length; i++) {
    outputL[i] += input[i];
    outputR[i] += input[i];
  }
};
DSPAlgorithm[1001002].set = function (source, destination) {
  destination[0].set(source[0]);
  destination[1].set(source[0]);
};

DSPAlgorithm[1001004] = DSPAlgorithm[1001002];
DSPAlgorithm[1001004].set = DSPAlgorithm[1001002].set;

DSPAlgorithm[1001006] = function (source, destination, length) {
  var outputC = destination[2];
  var input = source[0];

  for (var i = 0; i < length; i++) {
    outputC[i] += input[i];
  }
};
DSPAlgorithm[1001006].set = function (source, destination) {
  destination[2].set(source[0]);
};

DSPAlgorithm[1002002] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var inputL = source[0];
  var inputR = source[1];

  for (var i = 0; i < length; i++) {
    outputL[i] += inputL[i];
    outputR[i] += inputR[i];
  }
};
DSPAlgorithm[1002002].set = function (source, destination) {
  destination[0].set(source[0]);
  destination[1].set(source[1]);
};
DSPAlgorithm[2002002] = DSPAlgorithm[1002002];
DSPAlgorithm[2002002].set = DSPAlgorithm[1002002].set;

DSPAlgorithm[1002004] = DSPAlgorithm[1002002];
DSPAlgorithm[1002004].set = DSPAlgorithm[1002002].set;

DSPAlgorithm[1002006] = DSPAlgorithm[1002004];
DSPAlgorithm[1002006].set = DSPAlgorithm[1002004].set;

DSPAlgorithm[1004006] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var outputSL = destination[4];
  var outputSR = destination[5];
  var inputL = source[0];
  var inputR = source[1];
  var inputSL = source[2];
  var inputSR = source[3];

  for (var i = 0; i < length; i++) {
    outputL[i] += inputL[i];
    outputR[i] += inputR[i];
    outputSL[i] += inputSL[i];
    outputSR[i] += inputSR[i];
  }
};
DSPAlgorithm[1004006].set = function (source, destination) {
  destination[0].set(source[0]);
  destination[1].set(source[1]);
  destination[4].set(source[2]);
  destination[5].set(source[3]);
};

DSPAlgorithm[1002001] = function (source, destination, length) {
  var output = destination[0];
  var inputL = source[0];
  var inputR = source[1];

  for (var i = 0; i < length; i++) {
    output[i] += 0.5 * (inputL[i] + inputR[i]);
  }
};

DSPAlgorithm[1004001] = function (source, destination, length) {
  var output = destination[0];
  var inputL = source[0];
  var inputR = source[1];
  var inputSL = source[2];
  var inputSR = source[3];

  for (var i = 0; i < length; i++) {
    output[i] += 0.25 * (inputL[i] + inputR[i] + inputSL[i] + inputSR[i]);
  }
};

DSPAlgorithm[1006001] = function (source, destination, length) {
  var output = destination[0];
  var inputL = source[0];
  var inputR = source[1];
  var inputC = source[2];
  var inputSL = source[4];
  var inputSR = source[5];

  for (var i = 0; i < length; i++) {
    output[i] += 0.7071 * (inputL[i] + inputR[i]) + inputC[i] + 0.5 * (inputSL[i] + inputSR[i]);
  }
};

DSPAlgorithm[1004002] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var inputL = source[0];
  var inputR = source[1];
  var inputSL = source[2];
  var inputSR = source[3];

  for (var i = 0; i < length; i++) {
    outputL[i] += 0.5 * (inputL[i] + inputSL[i]);
    outputR[i] += 0.5 * (inputR[i] + inputSR[i]);
  }
};

DSPAlgorithm[1006002] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var inputL = source[0];
  var inputR = source[1];
  var inputC = source[2];
  var inputSL = source[4];
  var inputSR = source[5];

  for (var i = 0; i < length; i++) {
    outputL[i] += inputL[i] + 0.7071 * (inputC[i] + inputSL[i]);
    outputR[i] += inputR[i] + 0.7071 * (inputC[i] + inputSR[i]);
  }
};

DSPAlgorithm[1006004] = function (source, destination, length) {
  var outputL = destination[0];
  var outputR = destination[1];
  var outputSL = destination[2];
  var outputSR = destination[3];
  var inputL = source[0];
  var inputR = source[1];
  var inputC = source[2];
  var inputSL = source[4];
  var inputSR = source[5];

  for (var i = 0; i < length; i++) {
    outputL[i] += inputL[i] + 0.7071 * inputC[i];
    outputR[i] += inputR[i] + 0.7071 * inputC[i];
    outputSL[i] += inputSL[i];
    outputSR[i] += inputSR[i];
  }
};

module.exports = AudioBus;