"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");
var AnalyserNodeDSP = require("./dsp/AnalyserNode");

var _require = require("../utils"),
    defaults = _require.defaults,
    clamp = _require.clamp;

var _require2 = require("../utils"),
    toNumber = _require2.toNumber,
    toPowerOfTwo = _require2.toPowerOfTwo;

var _require3 = require("../constants/ChannelCountMode"),
    MAX = _require3.MAX;

var DEFAULT_FFT_SIZE = 2048;
var DEFAULT_MIN_DECIBELS = -100;
var DEFAULT_MAX_DECIBELS = -30;
var DEFAULT_SMOOTHING_TIME_CONSTANT = 0.8;
var MIN_FFT_SIZE = 32;
var MAX_FFT_SIZE = 32768;

var AnalyserNode = function (_AudioNode) {
  _inherits(AnalyserNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.fftSize
   * @param {number}       opts.minDecibels
   * @param {number}       opts.maxDecibels
   * @param {number}       opts.smoothingTimeConstant
   */
  function AnalyserNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AnalyserNode);

    var fftSize = defaults(opts.fftSize, DEFAULT_FFT_SIZE);
    var minDecibels = defaults(opts.minDecibels, DEFAULT_MIN_DECIBELS);
    var maxDecibels = defaults(opts.maxDecibels, DEFAULT_MAX_DECIBELS);
    var smoothingTimeConstant = defaults(opts.smoothingTimeConstant, DEFAULT_SMOOTHING_TIME_CONSTANT);

    var _this = _possibleConstructorReturn(this, (AnalyserNode.__proto__ || Object.getPrototypeOf(AnalyserNode)).call(this, context, opts, {
      inputs: [1],
      outputs: [1],
      channelCount: 1,
      channelCountMode: MAX
    }));

    _this._fftSize = fftSize;
    _this._minDecibels = minDecibels;
    _this._maxDecibels = maxDecibels;
    _this._smoothingTimeConstant = smoothingTimeConstant;

    _this.dspInit(context.sampleRate);
    _this.setFftSize(fftSize);
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(AnalyserNode, [{
    key: "getFftSize",
    value: function getFftSize() {
      return this._fftSize;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setFftSize",
    value: function setFftSize(value) {
      value = clamp(value | 0, MIN_FFT_SIZE, MAX_FFT_SIZE);
      value = toPowerOfTwo(value, Math.ceil);
      this._fftSize = value;
      this.dspUpdateSizes(this._fftSize);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getFrequencyBinCount",
    value: function getFrequencyBinCount() {
      return this._fftSize / 2;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getMinDecibels",
    value: function getMinDecibels() {
      return this._minDecibels;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setMinDecibels",
    value: function setMinDecibels(value) {
      value = toNumber(value);
      /* istanbul ignore else */
      if (-Infinity < value && value < this._maxDecibels) {
        this._minDecibels = value;
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getMaxDecibels",
    value: function getMaxDecibels() {
      return this._maxDecibels;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setMaxDecibels",
    value: function setMaxDecibels(value) {
      value = toNumber(value);
      /* istanbul ignore else */
      if (this._minDecibels < value && value < Infinity) {
        this._maxDecibels = value;
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getSmoothingTimeConstant",
    value: function getSmoothingTimeConstant() {
      return this._smoothingTimeConstant;
    }

    /**
     * @param {number}
     */

  }, {
    key: "setSmoothingTimeConstant",
    value: function setSmoothingTimeConstant(value) {
      value = clamp(toNumber(value), 0, 1);
      this._smoothingTimeConstant = value;
    }

    /**
     * @param {Float32Array} array
     */

  }, {
    key: "getFloatFrequencyData",
    value: function getFloatFrequencyData(array) {
      this.dspGetFloatFrequencyData(array);
    }

    /**
     * @param {Uint8Array} array
     */

  }, {
    key: "getByteFrequencyData",
    value: function getByteFrequencyData(array) {
      this.dspGetByteFrequencyData(array);
    }

    /**
     * @param {Float32Array} array
     */

  }, {
    key: "getFloatTimeDomainData",
    value: function getFloatTimeDomainData(array) {
      this.dspGetFloatTimeDomainData(array);
    }

    /**
     * @param {Uint8Array} array
     */

  }, {
    key: "getByteTimeDomainData",
    value: function getByteTimeDomainData(array) {
      this.dspGetByteTimeDomainData(array);
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "channelDidUpdate",
    value: function channelDidUpdate(numberOfChannels) {
      this.outputs[0].setNumberOfChannels(numberOfChannels);
    }
  }]);

  return AnalyserNode;
}(AudioNode);

Object.assign(AnalyserNode.prototype, AnalyserNodeDSP);

module.exports = AnalyserNode;